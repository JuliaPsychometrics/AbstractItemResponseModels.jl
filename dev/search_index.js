var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"CurrentModule = AbstractItemResponseModels","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Types","page":"API","title":"Types","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ItemResponseModel","category":"page"},{"location":"api/#AbstractItemResponseModels.ItemResponseModel","page":"API","title":"AbstractItemResponseModels.ItemResponseModel","text":"ItemResponseModel\n\nAn abstract type representing an item response theory model.\n\nEach implementation T <: ItemResponseModel must define the following traits:\n\nresponse_type: A valid ResponseType\nperson_dimensionality: A valid Dimensionality\nitem_dimensionality: A valid Dimensionality\nestimation_type: A valid EstimationType\n\nAdditionally T <: ItemResponseModel must implement the following interface:\n\nirf: An item response function returning the probability that a person with given ability estimate will answer an item with a particular response.\niif: An item information function returning the information of answering with a particular response on an item given an ability estimate.\nfit: A function fitting an item response model of type T to observed data.\ngetitemlocations: A function returning the item locations for a given item.\ngetpersonlocations: A function returning the person locations for a given person.\n\n\n\n\n\n","category":"type"},{"location":"api/#Traits","page":"API","title":"Traits","text":"","category":"section"},{"location":"api/#Dimensionality","page":"API","title":"Dimensionality","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Dimensionality\nUnivariate\nMultivariate\nitem_dimensionality\nperson_dimensionality","category":"page"},{"location":"api/#AbstractItemResponseModels.Dimensionality","page":"API","title":"AbstractItemResponseModels.Dimensionality","text":"Dimensionality\n\nThe Dimensionality of an ItemResponseModel defines whether or not the person and/or item parameters of the model are unidimensional or multidimensional.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.Univariate","page":"API","title":"AbstractItemResponseModels.Univariate","text":"Univariate <: Dimensionality\n\nDefines that an ItemResponseModel has scalar valued parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.Multivariate","page":"API","title":"AbstractItemResponseModels.Multivariate","text":"Multivariate <: Dimensionality\n\nDefines that an ItemResponseModel has vector valued parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.item_dimensionality","page":"API","title":"AbstractItemResponseModels.item_dimensionality","text":"item_dimensionality(::T) -> Dimensionality\n\nReturn the Dimensionality of the item parameters of an ItemResponseModel.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.person_dimensionality","page":"API","title":"AbstractItemResponseModels.person_dimensionality","text":"item_dimensionality(::T) -> Dimensionality\n\nReturn the Dimensionality of the person parameters of an ItemResponseModel.\n\n\n\n\n\n","category":"function"},{"location":"api/#Estimation-type","page":"API","title":"Estimation type","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"EstimationType\nPointEstimate\nSamplingEstimate\nestimation_type","category":"page"},{"location":"api/#AbstractItemResponseModels.EstimationType","page":"API","title":"AbstractItemResponseModels.EstimationType","text":"EstimationType\n\nThe EstimationType of an ItemResponseModel describes the type of parameter estimation for the model.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.PointEstimate","page":"API","title":"AbstractItemResponseModels.PointEstimate","text":"PointEstimate <: EstimationType\n\nDefines that the parameters of an ItemResponseModel are estimated by a single point estimate. Thus, parameters for a model with estimation_type(model) == PointEstimate are single real-valued numbers.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.SamplingEstimate","page":"API","title":"AbstractItemResponseModels.SamplingEstimate","text":"SamplingEstimate <: EstimationType\n\nDefines that the parameters of an ItemResponseModel are estimated by a sampling procedure. Thus, parameters for a model with estimation_type(model) == SamplingEstimate are vectors of real-valued numbers where the length of the parameter vector is equal to the number of samples drawn.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.estimation_type","page":"API","title":"AbstractItemResponseModels.estimation_type","text":"estimation_type(::T) -> EstimationType\n\nReturn the EstimationType of an [ItemResponseModel].\n\n\n\n\n\n","category":"function"},{"location":"api/#Response-type","page":"API","title":"Response type","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ResponseType\nDichotomous\nNominal\nOrdinal\nContinuous\nresponse_type\ncheckresponsetype","category":"page"},{"location":"api/#AbstractItemResponseModels.ResponseType","page":"API","title":"AbstractItemResponseModels.ResponseType","text":"ResponseType\n\nThe ResponseType defines the scale level of item responses for a given ItemResponseModel.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.Dichotomous","page":"API","title":"AbstractItemResponseModels.Dichotomous","text":"Dichotomous <: ResponseType\n\nDefines that an ItemResponseModel has a binary response variable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.Nominal","page":"API","title":"AbstractItemResponseModels.Nominal","text":"Nominal <: ResponseType\n\nDefines that an ItemResponseModel has an unordered categorical response variable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.Ordinal","page":"API","title":"AbstractItemResponseModels.Ordinal","text":"Ordinal <: ResponseType\n\nDefines that an ItemResponseModel has an ordered categorical response variable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.Continuous","page":"API","title":"AbstractItemResponseModels.Continuous","text":"Continous <: ResponseType\n\nDefines that an ItemResponseModel has a continous response variable.\n\n\n\n\n\n","category":"type"},{"location":"api/#AbstractItemResponseModels.response_type","page":"API","title":"AbstractItemResponseModels.response_type","text":"response_type(::T) -> ResponseType\n\nReturn the ResponseType of an ItemResponseModel.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.checkresponsetype","page":"API","title":"AbstractItemResponseModels.checkresponsetype","text":"checkresponsetype(::T, arr) where {T<:ResponseType}\n\nCheck if the responses in arr are valid for ResponseType T.\n\nIf all responses are valid, nothing is returned.\n\nIf any invalid responses are found, a DomainError is thrown.\n\n\n\n\n\n","category":"function"},{"location":"api/#Methods","page":"API","title":"Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"expected_score\nfit\ngetitemlocations\ngetpersonlocations\niif\ninformation\nirf","category":"page"},{"location":"api/#AbstractItemResponseModels.expected_score","page":"API","title":"AbstractItemResponseModels.expected_score","text":"expected_score(model::ItemResponseModel, theta; scoring_function)::Real\nexpected_score(model::ItemResponseModel, theta; scoring_function)::AbstractVector{<:Real}\nexpected_score(model::ItemResponseModel, theta, is; scoring_function)::Real\nexpected_score(model::ItemResponseModel, theta, is; scoring_function)::AbstractVector{<:Real}\n\nCalculate the expected score of an ItemResponseModel.\n\nArguments\n\nmodel: An ItemResponseModel\ntheta: The person parameter value(s)\nis: One or multiple item identifiers. If is is omitted, the expected score for the whole test is returned.\n\nKeyword arguments\n\nscoring_function: A function mapping all possible response values y to arbitrary values. Must default to identity.\n\nReturn values\n\nIf estimation_type(model) == PointEstimate then expected_score must return a single scalar value.\n\nIf estimation_type(model) == SamplingEstimate then expected_score must return a vector of values with the length equal to the number of samples drawn.\n\n\n\n\n\n","category":"function"},{"location":"api/#StatsAPI.fit","page":"API","title":"StatsAPI.fit","text":"fit(::Type{T}, data::AbstractMatrix, args...; kwargs...)::T where {T<:ItemResponseModel}\n\nFit an item response model to response data.\n\nArguments\n\ndata: Observed data. If data is a response matrix, the columns must describe items and rows describe persons.\nargs...: Additional arguments required to fit the ItemResponseModel\n\nKeyword arguments\n\nkwargs...: Additional keyword arguments required to fit the ItemResponseModel\n\nReturn values\n\nA fitted ItemResponseModel.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.getitemlocations","page":"API","title":"AbstractItemResponseModels.getitemlocations","text":"getitemlocations(model::ItemResponseModel, i, y)::Real\ngetitemlocations(model::ItemResponseModel, i, y)::AbstractVector{<:Real}\ngetitemlocations(model::ItemResponseModel, i, y)::AbstractMatrix{<:Real}\n\nGet the item locations for an item from an ItemResponseModel.\n\nArguments\n\nmodel: An ItemResponseModel\ni: A unique item identifier\ny: Response value(s)\n\nReturn values\n\nIf item_dimensionality(model) == Univariate and estimation_type(model) == PointEstimate then getitemlocations must return a single scalar value.\n\nIf item_dimensionality(model) == Multivariate and estimation_type(model) == PointEstimate then getitemlocations must return a vector of values corresponding to the dimensionality of the item parameters.\n\nIf item_dimensionality(model) == Univariate and estimation_type(model) == SamplingEstimate then getitemlocations must return a vector of values with the length equal to the number of samples drawn.\n\nIf item_dimensionality(model) == Multivariate and estimation_type(model) == SamplingEstimate then getitemlocations must return a matrix with rows corresponding to the drawn samples and columns corresponding to the dimension of the item parameter.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.getpersonlocations","page":"API","title":"AbstractItemResponseModels.getpersonlocations","text":"getpersonlocations(model::ItemResponseModel, p)::Real\ngetpersonlocations(model::ItemResponseModel, p)::AbstractVector{<:Real}\ngetpersonlocations(model::ItemResponseModel, p)::AbstractMatrix{<:Real}\n\nGet the person locations for an person from an ItemResponseModel.\n\nArguments\n\nmodel: An ItemResponseModel\np: A unique person identifier\n\nReturn values\n\nIf person_dimensionality(model) == Univariate and estimation_type(model) == PointEstimate then getpersonlocations must return a single scalar value.\n\nIf person_dimensionality(model) == Multivariate and estimation_type(model) == PointEstimate then getpersonlocations must return a vector of values corresponding to the dimensionality of the person parameters.\n\nIf person_dimensionality(model) == Univariate and estimation_type(model) == SamplingEstimate then getpersonlocations must return a vector of values with the length equal to the number of samples drawn.\n\nIf person_dimensionality(model) == Multivariate and estimateion_type(model) == SamplingEstimate then getpersonlocations must return a matrix with rows corresponding to the drawn samples and columns corresponding to the dimension of the person parameter.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.iif","page":"API","title":"AbstractItemResponseModels.iif","text":"iif(model::ItemResponseModel, theta, i, y)::Real\niif(model::ItemResponseModel, theta, i, y)::AbstractVector{<:Real}\n\nArgument\n\nmodel: An ItemResponseModel\ntheta: The person parameter value(s)\ni: A unique item identifier\ny: Response value(s)\n\nReturn values\n\nIf estimation_type(model) == PointEstimate then the item information function must return a scalar value.\n\nIf estimation_type(model) == SamplingEstimate then the item information function must return a vector of values with the length equal to the number of samples drawn.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.information","page":"API","title":"AbstractItemResponseModels.information","text":"information(model::ItemResponseModel, theta; scoring_function)::Real\ninformation(model::ItemResponseModel, theta; scoring_function)::AbstractVector{<:Real}\ninformation(model::ItemResponseModel, theta, is; scoring_function)::Real\ninformation(model::ItemResponseModel, theta, is; scoring_function)::AbstractVector{<:Real}\n\nCalculate the information of an ItemResponseModel.\n\nArguments\n\ntheta: The person parameter value(s)\nis: One or multiple item identifiers. If is is omitted, the information of the whole test (test information) is returned.\n\nKeyword arguments\n\nscoring_function: A function mapping all possible response values y to arbitrary values. Must default to identity.\n\nReturn values\n\nIf estimatione_type(model) == PointEstimate then information must return a single scalar value.\n\nIf estimation_type(model) == SamplingEstimate then information must return a vector of values with the length equal to the number of samples drawn.\n\n\n\n\n\n","category":"function"},{"location":"api/#AbstractItemResponseModels.irf","page":"API","title":"AbstractItemResponseModels.irf","text":"irf(model::ItemResponseModel, theta, i, y)::Real\nirf(model::ItemResponseModel, theta, i, y)::AbstractVector{<:Real}\n\nEvaluate the item response function of an ItemResponseModel.\n\nArgument\n\nmodel: An ItemResponseModel\ntheta: The person parameter value(s)\ni: A unique item identifier\ny: Response value(s)\n\nReturn values\n\nIf estimation_type(model) == PointEstimate then the item response function must return a scalar value.\n\nIf estimation_type(model) == SamplingEstimate then the item response function must return a vector of values with the length equal to the number of samples.\n\n\n\n\n\n","category":"function"},{"location":"api/#Tests","page":"API","title":"Tests","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Interface tests are provided in the AbstractItemResponseModels.Tests module. ","category":"page"},{"location":"api/","page":"API","title":"API","text":"Tests.test_interface","category":"page"},{"location":"api/#AbstractItemResponseModels.Tests.test_interface","page":"API","title":"AbstractItemResponseModels.Tests.test_interface","text":"test_interface(T::Type{<:ItemResponseModel}, data, args...; kwargs...)\n\nTest the implementation of an item response model interface.\n\nArguments\n\nT: The implemented model type\ndata: observed data\nargs...: Additional arguments passed to fit\n\nKeyword arguments\n\nkwargs...: Additional keyword arguments passed to fit\n\n\n\n\n\n","category":"function"},{"location":"#AbstractItemResponseModels.jl","page":"Home","title":"AbstractItemResponseModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a generic interface for item response models in Julia. It is targeted  at developers of item response model packages. Packages sucessfully implementing the  AbstractItemResponseModels interface will profit from features within JuliaPsychometrics such as plotting for their item response models (e.g. via ItemResponsePlots.jl).","category":"page"},{"location":"#Interface","page":"Home","title":"Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Creating a package using AbstractItemResponseModels requires that","category":"page"},{"location":"","page":"Home","title":"Home","text":"AbstractItemResponseModels.jl is added as a package dependency\nthe AbstractItemResponseModels interface is implemented as described below\n[optional] the interface tested (also described below)","category":"page"},{"location":"#Types","page":"Home","title":"Types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AbstractItemResponseModels offers a single abstract type defining an item response model. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"abstract type ItemResponseModel end","category":"page"},{"location":"","page":"Home","title":"Home","text":"All concrete implementations of item response models must inherit from this abstract type, e.g.","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct MyFancyIRTModel <: ItemResponseModel end","category":"page"},{"location":"#Traits","page":"Home","title":"Traits","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Item response models have traits attached to them allowing for flexible dispatch.  AbstractItemResponseModels defines a total of 4 such traits.","category":"page"},{"location":"#Response-type","page":"Home","title":"Response type","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each item response model must define its response type. The response type sets the plausible values that the response data can take.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The available response types are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"abstract type Dichotomous <: ResponseType end\nabstract type Nominal <: ResponseType end\nabstract type Ordinal <: ResponseType end\nabstract type Continuous <: ResponseType end","category":"page"},{"location":"","page":"Home","title":"Home","text":"To define a response type for an item response model, implement the response_type function  for your model such as","category":"page"},{"location":"","page":"Home","title":"Home","text":"response_type(::Type{MyFancyIRTModel}) = Dichotomous","category":"page"},{"location":"#Dimensionality","page":"Home","title":"Dimensionality","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An item response model defines the dimensionality of both item and person parameters.  The dimensionality can be univariate or multivariate.","category":"page"},{"location":"","page":"Home","title":"Home","text":"abstract type Univariate <: Dimensionality end\nabstract type Multivariate <: Dimensionality end","category":"page"},{"location":"","page":"Home","title":"Home","text":"Define the person and item dimensionality of your model by specifying the person_dimensionality  and item_dimensionality function respectively.","category":"page"},{"location":"","page":"Home","title":"Home","text":"person_dimensionality(::Type{MyFancyIRTModel}) = Multivariate\nitem_dimensionality(::Type{MyFancyIRTModel}) = Univariate","category":"page"},{"location":"#Estimation-type","page":"Home","title":"Estimation type","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Defining an estimation type allows dispatching based on the type of parameter estimation in  an item response model. AbstractItemResponseModels differentiates between point estimation  (e.g. Maximum Likelihood Estimation) and sampling based estimation such as Markov Chain Monte  Carlo Methods).","category":"page"},{"location":"","page":"Home","title":"Home","text":"abstract type PointEstimate <: EstimationType end\nabstract type SamplingEstimate <: EstimationType end","category":"page"},{"location":"","page":"Home","title":"Home","text":"The estimation type can be defined for a model via the estimation_type function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"estimation_type(::Type{MyFancyIRTModel}) = PointEstimate","category":"page"},{"location":"#Functions","page":"Home","title":"Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Implementing the AbstractItemResponseModels interface requires defining methods for the  generic functions provided in this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First a item response function must be provided by extending the irf generic function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"irf(model::ItemResponseModel, theta, i, y)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Further an item information function must be defined,","category":"page"},{"location":"","page":"Home","title":"Home","text":"iif(model::ItemResponseModel, theta, i, y)","category":"page"},{"location":"","page":"Home","title":"Home","text":"An item response model is fitted to data by a fit function,","category":"page"},{"location":"","page":"Home","title":"Home","text":"fit(::Type{<:ItemResponseModel}, data, args...; kwargs...)","category":"page"},{"location":"","page":"Home","title":"Home","text":"If applicable, an expected score function and an information function must be provided.","category":"page"},{"location":"","page":"Home","title":"Home","text":"expected_score(model::ItemResponseModel, theta[, is]; scoring_function)\ninformation(model::ItemResponseModel, theta[, is]; scoring_function)","category":"page"},{"location":"#Interface-Tests","page":"Home","title":"Interface Tests","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AbstractItemResponseModels provides standardized testing of the interface in a separate  module Tests. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To test if your implementation of the interface is correct, add the test_interface function  to your test/runtests.jl file as in the example below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using MyFancyIRTPackage\nusing Test\nusing AbstractItemResponseModels.Tests\n\n@testset \"MyFancyIRTPackage\" begin\n    test_interface(MyFancyIRTModel, args...; kwargs...) \n    # additional unit tests...\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you implement multiple models in your package, make sure to call test_interface for all model types. An example of this can be seen in the RaschModels.jl package.","category":"page"}]
}

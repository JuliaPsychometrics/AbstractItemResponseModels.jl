var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbstractItemResponseModels","category":"page"},{"location":"#AbstractItemResponseModels","page":"Home","title":"AbstractItemResponseModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AbstractItemResponseModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AbstractItemResponseModels]","category":"page"},{"location":"#AbstractItemResponseModels.Continuous","page":"Home","title":"AbstractItemResponseModels.Continuous","text":"Continous <: ResponseType\n\nDefines that an ItemResponseModel has a continous response variable.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.Dichotomous","page":"Home","title":"AbstractItemResponseModels.Dichotomous","text":"Dichotomous <: ResponseType\n\nDefines that an ItemResponseModel has a binary response variable.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.Dimensionality","page":"Home","title":"AbstractItemResponseModels.Dimensionality","text":"Dimensionality\n\nThe Dimensionality of an ItemResponseModel defines whether or not the person and/or item parameters of the model are unidimensional or multidimensional.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.EstimationType","page":"Home","title":"AbstractItemResponseModels.EstimationType","text":"EstimationType\n\nThe EstimationType of an ItemResponseModel describes the type of parameter estimation for the model.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.ItemResponseModel","page":"Home","title":"AbstractItemResponseModels.ItemResponseModel","text":"ItemResponseModel\n\nAn abstract type representing an item response theory model.\n\nEach implementation T <: ItemResponseModel must define the following traits:\n\nresponse_type: A valid ResponseType\nperson_dimensionality: A valid Dimensionality\nitem_dimensionality: A valid Dimensionality\nestimation_type: A valid EstimationType\n\nAdditionally T <: ItemResponseModel must implement the following interface:\n\nirf: An item response function returning the probability that a person with given ability estimate will answer an item with a particular response.\niif: An item information function returning the information of answering with a particular response on an item given an ability estimate.\nfit: A function fitting an item response model of type T to observed data.\npredict: A function predicting future responses\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.Multivariate","page":"Home","title":"AbstractItemResponseModels.Multivariate","text":"Multivariate <: Dimensionality\n\nDefines that an ItemResponseModel has vector valued parameters.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.Nominal","page":"Home","title":"AbstractItemResponseModels.Nominal","text":"Nominal <: ResponseType\n\nDefines that an ItemResponseModel has an unordered categorical response variable.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.Ordinal","page":"Home","title":"AbstractItemResponseModels.Ordinal","text":"Ordinal <: ResponseType\n\nDefines that an ItemResponseModel has an ordered categorical response variable.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.PointEstimate","page":"Home","title":"AbstractItemResponseModels.PointEstimate","text":"PointEstimate <: EstimationType\n\nDefines that the parameters of an ItemResponseModel are estimated by a single point estimate. Thus, parameters for a model with estimation_type(model) == PointEstimate are single real-valued numbers.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.ResponseType","page":"Home","title":"AbstractItemResponseModels.ResponseType","text":"ResponseType\n\nThe ResponseType defines the scale level of item responses for a given ItemResponseModel.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.SamplingEstimate","page":"Home","title":"AbstractItemResponseModels.SamplingEstimate","text":"SamplingEstimate <: EstimationType\n\nDefines that the parameters of an ItemResponseModel are estimated by a sampling procedure. Thus, parameters for a model with estimation_type(model) == SamplingEstimate are vectors of real-valued numbers where the length of the parameter vector is equal to the number of samples drawn.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.Univariate","page":"Home","title":"AbstractItemResponseModels.Univariate","text":"Univariate <: Dimensionality\n\nDefines that an ItemResponseModel has scalar valued parameters.\n\n\n\n\n\n","category":"type"},{"location":"#AbstractItemResponseModels.checkresponsetype-Union{Tuple{T}, Tuple{T, Any}} where T<:ResponseType","page":"Home","title":"AbstractItemResponseModels.checkresponsetype","text":"checkresponsetype(::T, arr) where {T<:ResponseType}\n\nCheck if the responses in arr are valid for ResponseType T.\n\nIf all responses are valid, nothing is returned.\n\nIf any invalid responses are found, a DomainError is thrown.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractItemResponseModels.estimation_type-Tuple{T} where T","page":"Home","title":"AbstractItemResponseModels.estimation_type","text":"estimation_type(::T) -> EstimationType\n\nReturn the EstimationType of an [ItemResponseModel].\n\n\n\n\n\n","category":"method"},{"location":"#AbstractItemResponseModels.expected_score","page":"Home","title":"AbstractItemResponseModels.expected_score","text":"expected_score(model::ItemResponseModel, theta; scoring_function) -> Float64\nexpected_score(model::ItemResponseModel, theta; scoring_function) -> Vector{Float64}\nexpected_score(model::ItemResponseModel, theta, is; scoring_function) -> Float64\nexpected_score(model::ItemResponseModel, theta, is; scoring_function) -> Vector{Float64}\n\nCalculate the expected score of an ItemResponseModel.\n\nArguments\n\nmodel: An ItemResponseModel\ntheta: The person parameter value(s)\nis: One or multiple item identifiers. If is is omitted, the expected score for the whole test is returned.\n\nKeyword arguments\n\nscoring_function: A function mapping all possible response values y to arbitrary values. Must default to identity.\n\nReturn values\n\nIf estimation_type(model) == PointEstimate then expected_score must return a single scalar value.\n\nIf estimation_type(model) == SamplingEstimate then expected_score must return a vector of values with the length equal to the number of samples drawn.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractItemResponseModels.iif","page":"Home","title":"AbstractItemResponseModels.iif","text":"iif(model::ItemResponseModel, theta, i, y) -> Float64\niif(model::ItemResponseModel, theta, i, y) -> Vector{Float64}\n\nArgument\n\nmodel: An ItemResponseModel\ntheta: The person parameter value(s)\ni: A unique item identifier\ny: Response value(s)\n\nReturn values\n\nIf estimation_type(model) == PointEstimate then the item information function must return a scalar value.\n\nIf estimation_type(model) == SamplingEstimate then the item information function must return a vector of values with the length equal to the number of samples drawn.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractItemResponseModels.information","page":"Home","title":"AbstractItemResponseModels.information","text":"information(model::ItemResponseModel, theta; scoring_function) -> Float64\ninformation(model::ItemResponseModel, theta; scoring_function) -> Vector{Float64}\ninformation(model::ItemResponseModel, theta, is; scoring_function) -> Float64\ninformation(model::ItemResponseModel, theta, is; scoring_function) -> Vector{Float64}\n\nCalculate the information of an ItemResponseModel.\n\nArguments\n\ntheta: The person parameter value(s)\nis: One or multiple item identifiers. If is is omitted, the information of the whole test (test information) is returned.\n\nKeyword arguments\n\nscoring_function: A function mapping all possible response values y to arbitrary values. Must default to identity.\n\nReturn values\n\nIf estimatione_type(model) == PointEstimate then information must return a single scalar value.\n\nIf estimation_type(model) == SamplingEstimate then information musst return a vector of values with the length equal to the number of samples drawn.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractItemResponseModels.irf","page":"Home","title":"AbstractItemResponseModels.irf","text":"irf(model::ItemResponseModel, theta, i, y) -> Float64\nirf(model::ItemResponseModel, theta, i, y) -> Vector{Float64}\n\nEvaluate the item response function of an ItemResponseModel.\n\nArgument\n\nmodel: An ItemResponseModel\ntheta: The person parameter value(s)\ni: A unique item identifier\ny: Response value(s)\n\nReturn values\n\nIf estimation_type(model) == PointEstimate then the item response function must return a scalar value.\n\nIf estimation_type(model) == SamplingEstimate then the item response function must return a vector of values with the length equal to the number of samples.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractItemResponseModels.item_dimensionality-Tuple{T} where T","page":"Home","title":"AbstractItemResponseModels.item_dimensionality","text":"item_dimensionality(::T) -> Dimensionality\n\nReturn the Dimensionality of the item parameters of an ItemResponseModel.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractItemResponseModels.person_dimensionality-Tuple{T} where T","page":"Home","title":"AbstractItemResponseModels.person_dimensionality","text":"item_dimensionality(::T) -> Dimensionality\n\nReturn the Dimensionality of the person parameters of an ItemResponseModel.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractItemResponseModels.response_type-Tuple{T} where T","page":"Home","title":"AbstractItemResponseModels.response_type","text":"response_type(::T) -> ResponseType\n\nReturn the ResponseType of an ItemResponseModel.\n\n\n\n\n\n","category":"method"},{"location":"#StatsAPI.fit","page":"Home","title":"StatsAPI.fit","text":"fit(::Type{T}, data::AbstractMatrix, args...; kwargs...) where {T<:ItemResponseModel} -> T\n\nFit an item response model to response data.\n\nArguments\n\ndata: Observed data. If data is a response matrix, the columns must describe items and rows describe persons.\nargs...: Additional arguments required to fit the ItemResponseModel\n\nKeyword arguments\n\nkwargs...: Additional keyword arguments required to fit the ItemResponseModel\n\nReturn values\n\nA fitted ItemResponseModel.\n\n\n\n\n\n","category":"function"},{"location":"#StatsAPI.predict","page":"Home","title":"StatsAPI.predict","text":"predict(model::ItemResponseModel, args...; kwargs...)\n\n\n\n\n\n","category":"function"}]
}
